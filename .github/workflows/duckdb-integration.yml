name: DuckDB Integration Tests

on:
  pull_request:
    branches: [master, main]
    paths:
      # Adapter-specific files
      - 'src/sql_testing_library/_adapters/duckdb.py'
      - 'tests/integration/test_duckdb_integration.py'
      - 'tests/test_duckdb.py'

      # Core files that affect all adapters
      - 'src/sql_testing_library/_sql_utils.py'
      - 'src/sql_testing_library/_core.py'
      - 'src/sql_testing_library/_mock_table.py'
      - 'src/sql_testing_library/_types.py'

      # Cross-adapter test files
      - 'tests/integration/test_complex_types_integration.py'
      - 'tests/integration/test_primitive_types_integration.py'
      - 'tests/integration/test_map_types_integration.py'

      # Workflow file itself
      - '.github/workflows/duckdb-integration.yml'
  push:
    branches: [master, main]
    paths:
      # Adapter-specific files
      - 'src/sql_testing_library/_adapters/duckdb.py'
      - 'tests/integration/test_duckdb_integration.py'
      - 'tests/test_duckdb.py'

      # Core files that affect all adapters
      - 'src/sql_testing_library/_sql_utils.py'
      - 'src/sql_testing_library/_core.py'
      - 'src/sql_testing_library/_mock_table.py'
      - 'src/sql_testing_library/_types.py'

      # Cross-adapter test files
      - 'tests/integration/test_complex_types_integration.py'
      - 'tests/integration/test_primitive_types_integration.py'
      - 'tests/integration/test_map_types_integration.py'

      # Workflow file itself
      - '.github/workflows/duckdb-integration.yml'
  workflow_dispatch:  # Allow manual trigger
  workflow_call:      # Allow workflow reuse

env:
  PYTHON_VERSION: '3.10'

jobs:

  unit-tests:
    name: Unit Tests (Prerequisite)
    uses: ./.github/workflows/unit-tests-simple.yaml

  real-integration:
    name: Real DuckDB Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests  # Wait for unit tests to pass
    # Skip integration tests for Dependabot PRs due to security restrictions
    if: |
      github.actor != 'dependabot[bot]' && (
        (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) ||
        (github.event_name == 'pull_request') ||
        (github.event_name == 'workflow_dispatch') ||
        (github.event_name == 'workflow_call')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip poetry
          poetry install --with dev,duckdb

      - name: Configure DuckDB tests
        run: |
          # Generate pytest.ini file for DuckDB integration tests
          echo "[sql_testing]" > pytest.ini
          echo "adapter = duckdb" >> pytest.ini
          echo "database = :memory:" >> pytest.ini

          echo "✅ Generated pytest.ini for DuckDB integration tests"
          cat pytest.ini

      - name: Test DuckDB connectivity
        run: |
          echo "Testing DuckDB connection..."
          poetry run python -c "
          import duckdb

          # Test basic connectivity with in-memory database
          try:
              conn = duckdb.connect(':memory:')
              result = conn.execute('SELECT 1 as test_value').fetchone()
              print(f'✅ Test query successful: {result}')
              conn.close()
          except Exception as e:
              print(f'❌ Failed to execute test query: {e}')
              exit(1)

          # Test file database creation and query
          try:
              conn = duckdb.connect('test.db')
              conn.execute('CREATE TABLE test_table (id INTEGER, name VARCHAR)')
              conn.execute('INSERT INTO test_table VALUES (1, \"test\")')
              result = conn.execute('SELECT * FROM test_table').fetchall()
              print(f'✅ File database test successful: {result}')
              conn.close()
              import os
              os.remove('test.db')  # Clean up
          except Exception as e:
              print(f'❌ Failed file database test: {e}')
              exit(1)

          print('✅ DuckDB connectivity tests passed')
          "

      - name: Run DuckDB integration tests
        run: |
          echo "Running DuckDB integration tests..."
          poetry run pytest tests/integration/ -v -n auto --tb=short -m "integration and duckdb" --reruns 2 --reruns-delay 5 --cov=src/sql_testing_library --cov-report=xml:coverage-duckdb-integration.xml
        timeout-minutes: 10

      - name: Upload DuckDB integration coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-duckdb-integration.xml
          flags: integration,duckdb
          name: duckdb-integration-coverage
          fail_ci_if_error: false

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: duckdb-test-artifacts
          path: |
            pytest.ini
            *.log
            *.db
          retention-days: 7
