name: Snowflake Integration Tests

# This workflow uses key-pair authentication for Snowflake to support MFA-enabled accounts.
#
# Required GitHub Secrets:
# - SNOWFLAKE_ACCOUNT: Your Snowflake account identifier (e.g., ORGNAME-ACCOUNTNAME)
# - SNOWFLAKE_USER: Snowflake username configured with RSA public key
# - SNOWFLAKE_PRIVATE_KEY: The private key content (including -----BEGIN/END----- headers)
#   IMPORTANT: Copy the ENTIRE private key file content, including:
#   - The -----BEGIN RSA PRIVATE KEY----- header
#   - All the key content (base64 encoded)
#   - The -----END RSA PRIVATE KEY----- footer
#   - Preserve all newlines - paste exactly as shown in the file
#
# Optional GitHub Variables:
# - SNOWFLAKE_DATABASE: Database name (defaults to TEST_DB)
# - SNOWFLAKE_SCHEMA: Schema name (defaults to PUBLIC)
# - SNOWFLAKE_WAREHOUSE: Warehouse name (optional)
# - SNOWFLAKE_ROLE: Role name (optional)
#
# Setup Instructions:
# 1. Generate RSA key pair: python scripts/setup-snowflake-keypair.py
# 2. Configure public key in Snowflake: ALTER USER <username> SET RSA_PUBLIC_KEY='<public_key>';
# 3. Add private key to GitHub Secrets (Settings > Secrets > Actions > New repository secret)
# 4. Name the secret SNOWFLAKE_PRIVATE_KEY and paste the entire private key content

on:
  pull_request:
    branches: [master, main]
    paths:
      # Adapter-specific files
      - 'src/sql_testing_library/_adapters/snowflake.py'
      - 'tests/integration/test_snowflake_integration.py'

      # Core files that affect all adapters
      - 'src/sql_testing_library/_sql_utils.py'
      - 'src/sql_testing_library/_core.py'
      - 'src/sql_testing_library/_mock_table.py'
      - 'src/sql_testing_library/_types.py'

      # Cross-adapter test files
      - 'tests/integration/test_complex_types_integration.py'
      - 'tests/integration/test_primitive_types_integration.py'

      # Workflow file itself
      - '.github/workflows/snowflake-integration.yml'
  push:
    branches: [master, main]
    paths:
      # Adapter-specific files
      - 'src/sql_testing_library/_adapters/snowflake.py'
      - 'tests/integration/test_snowflake_integration.py'

      # Core files that affect all adapters
      - 'src/sql_testing_library/_sql_utils.py'
      - 'src/sql_testing_library/_core.py'
      - 'src/sql_testing_library/_mock_table.py'
      - 'src/sql_testing_library/_types.py'

      # Cross-adapter test files
      - 'tests/integration/test_complex_types_integration.py'
      - 'tests/integration/test_primitive_types_integration.py'

      # Workflow file itself
      - '.github/workflows/snowflake-integration.yml'
  workflow_dispatch:  # Allow manual trigger
  workflow_call:      # Allow workflow reuse

env:
  PYTHON_VERSION: '3.10'

jobs:

  unit-tests:
    name: Unit Tests (Prerequisite)
    uses: ./.github/workflows/unit-tests-simple.yaml

  real-integration:
    name: Real Snowflake Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests  # Wait for unit tests to pass
    # Skip integration tests for Dependabot PRs due to security restrictions
    if: |
      github.actor != 'dependabot[bot]' && (
        (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) ||
        (github.event_name == 'pull_request') ||
        (github.event_name == 'workflow_dispatch') ||
        (github.event_name == 'workflow_call')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip poetry
          poetry install --with dev,snowflake

      - name: Validate Snowflake credentials
        run: |
          echo "Validating required Snowflake environment variables..."

          if [ -z "${{ secrets.SNOWFLAKE_ACCOUNT }}" ]; then
            echo "❌ SNOWFLAKE_ACCOUNT secret not set"
            exit 1
          fi

          if [ -z "${{ secrets.SNOWFLAKE_USER }}" ]; then
            echo "❌ SNOWFLAKE_USER secret not set"
            exit 1
          fi

          if [ -z "${{ secrets.SNOWFLAKE_PRIVATE_KEY }}" ]; then
            echo "❌ SNOWFLAKE_PRIVATE_KEY secret not set"
            exit 1
          fi

          echo "✅ Required Snowflake secrets are configured"

      - name: Configure Snowflake tests
        run: |
          # Generate pytest.ini file for Snowflake integration tests
          echo "[sql_testing]" > pytest.ini
          echo "adapter = snowflake" >> pytest.ini
          echo "" >> pytest.ini
          echo "[sql_testing.snowflake]" >> pytest.ini
          echo "account = ${{ secrets.SNOWFLAKE_ACCOUNT }}" >> pytest.ini
          echo "user = ${{ secrets.SNOWFLAKE_USER }}" >> pytest.ini
          # Use key-pair authentication for CI/CD with MFA
          # The private key is provided via environment variable
          echo "database = ${{ vars.SNOWFLAKE_DATABASE || 'TEST_DB' }}" >> pytest.ini
          echo "schema = ${{ vars.SNOWFLAKE_SCHEMA || 'PUBLIC' }}" >> pytest.ini

          # Add optional warehouse if provided
          if [ -n "${{ vars.SNOWFLAKE_WAREHOUSE }}" ]; then
            echo "warehouse = ${{ vars.SNOWFLAKE_WAREHOUSE }}" >> pytest.ini
          fi

          # Add optional role if provided
          if [ -n "${{ vars.SNOWFLAKE_ROLE }}" ]; then
            echo "role = ${{ vars.SNOWFLAKE_ROLE }}" >> pytest.ini
          fi

          echo "✅ Generated pytest.ini for Snowflake integration tests"
          # Show config
          echo "Configuration:"
          cat pytest.ini

      - name: Set Snowflake environment variables
        run: |
          echo "SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}" >> $GITHUB_ENV
          echo "SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}" >> $GITHUB_ENV

          # Handle multiline private key
          echo "SNOWFLAKE_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.SNOWFLAKE_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "SNOWFLAKE_DATABASE=${{ vars.SNOWFLAKE_DATABASE || 'TEST_DB' }}" >> $GITHUB_ENV
          echo "SNOWFLAKE_SCHEMA=${{ vars.SNOWFLAKE_SCHEMA || 'PUBLIC' }}" >> $GITHUB_ENV

          # Optional variables
          if [ -n "${{ vars.SNOWFLAKE_WAREHOUSE }}" ]; then
            echo "SNOWFLAKE_WAREHOUSE=${{ vars.SNOWFLAKE_WAREHOUSE }}" >> $GITHUB_ENV
          fi

          if [ -n "${{ vars.SNOWFLAKE_ROLE }}" ]; then
            echo "SNOWFLAKE_ROLE=${{ vars.SNOWFLAKE_ROLE }}" >> $GITHUB_ENV
          fi

      - name: Test Snowflake connectivity
        run: |
          echo "Testing Snowflake connection..."
          poetry run python -c "
          import os
          import sys

          try:
              import snowflake.connector

              # Debug: Check if private key exists and its format
              private_key_env = os.getenv('SNOWFLAKE_PRIVATE_KEY')
              if not private_key_env:
                  print('❌ SNOWFLAKE_PRIVATE_KEY environment variable is not set')
                  sys.exit(1)

              print(f'✅ Private key found, length: {len(private_key_env)} characters')

              # Check key format
              if not private_key_env.startswith('-----BEGIN'):
                  print('❌ Private key does not start with -----BEGIN')
                  print('First 50 chars:', repr(private_key_env[:50]))
                  sys.exit(1)

              private_key = private_key_env.encode()

              # Import cryptography modules
              from cryptography.hazmat.backends import default_backend
              from cryptography.hazmat.primitives import serialization
              from cryptography.hazmat.primitives.serialization import load_pem_private_key

              try:
                  # Load PEM private key and convert to DER
                  private_key_obj = load_pem_private_key(
                      private_key,
                      password=None,
                      backend=default_backend()
                  )
                  print('✅ Private key loaded successfully')
              except Exception as e:
                  print(f'❌ Failed to load private key: {e}')
                  print('Key starts with:', repr(private_key_env[:50]))
                  print('Key ends with:', repr(private_key_env[-50:]))
                  sys.exit(1)

              # Convert to DER format for Snowflake
              private_key_der = private_key_obj.private_bytes(
                  encoding=serialization.Encoding.DER,
                  format=serialization.PrivateFormat.PKCS8,
                  encryption_algorithm=serialization.NoEncryption()
              )

              # Test connection with key-pair authentication
              conn = snowflake.connector.connect(
                  account=os.getenv('SNOWFLAKE_ACCOUNT'),
                  user=os.getenv('SNOWFLAKE_USER'),
                  private_key=private_key_der,
                  database=os.getenv('SNOWFLAKE_DATABASE', 'TEST_DB'),
                  schema=os.getenv('SNOWFLAKE_SCHEMA', 'PUBLIC'),
                  warehouse=os.getenv('SNOWFLAKE_WAREHOUSE'),
                  role=os.getenv('SNOWFLAKE_ROLE')
              )

              # Test simple query
              cursor = conn.cursor()
              cursor.execute('SELECT CURRENT_VERSION() as version')
              result = cursor.fetchone()
              print(f'✅ Snowflake connection successful. Version: {result[0]}')

              # Test database and schema access
              cursor.execute('SELECT CURRENT_DATABASE(), CURRENT_SCHEMA()')
              db_schema = cursor.fetchone()
              print(f'✅ Database: {db_schema[0]}, Schema: {db_schema[1]}')

              cursor.close()
              conn.close()

          except Exception as e:
              print(f'❌ Failed to connect to Snowflake: {e}')
              sys.exit(1)
          "

      - name: Run Snowflake integration tests with coverage
        run: |
          echo "Running Snowflake integration tests..."
          poetry run pytest tests/integration/ -v -n auto --tb=short -m "integration and snowflake" --reruns 2 --reruns-delay 5 \
            --cov=src/sql_testing_library \
            --cov-report=xml:coverage-snowflake-integration.xml
        timeout-minutes: 20

      - name: Upload Snowflake integration coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-snowflake-integration.xml
          flags: integration,snowflake
          name: snowflake-integration-coverage
          fail_ci_if_error: false

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: snowflake-test-artifacts
          path: |
            pytest.ini
            *.log
          retention-days: 7

      - name: Cost estimation
        if: always()
        run: |
          echo "📊 Snowflake Integration Test Cost Estimation:"
          echo "• Test duration: ~3-5 minutes"
          echo "• Warehouse size: X-Small (default)"
          echo "• Estimated cost: ~$0.01-0.05 USD"
          echo "• Queries executed: ~15-20 test queries"
          echo "• Data processed: Minimal (mock data only)"
          echo ""
          echo "💡 Cost optimization tips:"
          echo "• Tests use minimal mock data to reduce compute time"
          echo "• Temporary tables are automatically cleaned up"
          echo "• Warehouse auto-suspends after 1 minute of inactivity"
